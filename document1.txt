# 퀵정렬을 위한 파티션 함수
def partition(l, r, nums):
    # 리스트의 마지막 요소를 피벗으로 지정하고, 첫 요소는 포인터
    pivot, ptr = nums[r], l
    for i in range(l, r):
        if nums[i] <= pivot:
            # Swapping values smaller than the pivot to the front
            nums[i], nums[ptr] = nums[ptr], nums[i]
            ptr += 1
    # 연산 수행 후 피벗으로 지정된 인덱스의 값과, 시작값을 서로 스왑해준다.
    nums[ptr], nums[r] = nums[r], nums[ptr]
    return ptr
 
# 퀵정렬 함수
def quicksort(l, r, nums):
    if len(nums) == 1:  # Terminating Condition for recursion. VERY IMPORTANT!
        return nums
    if l < r:
        pi = partition(l, r, nums)
        quicksort(l, pi-1, nums)  # Recursively sorting the left values
        quicksort(pi+1, r, nums)  # Recursively sorting the right values
    return nums
 
# 퀵정렬 수행을 위한 1차원 리스트 
example = [4, 5, 1, 2, 3]
result = [1, 2, 3, 4, 5]

# 퀵정렬의 인자로 시작인덱스, 끝인덱스(리스트의 크기 - 1), 퀵정렬을 수행할 리스트를 넘겨준다.
print(quicksort(0, len(example)-1, example))

# example에 대해 퀵정렬 수행
example = [2, 5, 6, 1, 4, 6, 2, 4, 7, 8]
result = [1, 2, 2, 4, 4, 5, 6, 6, 7, 8]

# 출력 결과는 example과 result가 동일하게 나와야한다.
print(quicksort(0, len(example)-1, example))
